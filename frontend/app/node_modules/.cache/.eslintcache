[{"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\index.tsx":"1","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\App.tsx":"2","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\login\\Login.tsx":"3","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\register\\Register.tsx":"4","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\feed\\Feed.tsx":"5","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\navbar\\Navbar.tsx":"6","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\contexts\\UserContext.tsx":"7","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\hooks\\useUserContext.ts":"8","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\status_add\\StatusAdd.tsx":"9","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\hooks\\useFetch.ts":"10","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\status_list\\StatusList.tsx":"11","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\status_details\\StatusDetails.tsx":"12","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\status_comments\\StatusComments.tsx":"13","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\status_comment_details\\CommentDetails.tsx":"14","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\profile\\Profile.tsx":"15","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\profile\\Dialog.tsx":"16"},{"size":391,"mtime":1691509974046,"results":"17","hashOfConfig":"18"},{"size":1966,"mtime":1692369311400,"results":"19","hashOfConfig":"18"},{"size":2996,"mtime":1692616968534,"results":"20","hashOfConfig":"18"},{"size":3760,"mtime":1691344066323,"results":"21","hashOfConfig":"18"},{"size":3745,"mtime":1692634425143,"results":"22","hashOfConfig":"18"},{"size":854,"mtime":1692291037142,"results":"23","hashOfConfig":"18"},{"size":2651,"mtime":1692631908790,"results":"24","hashOfConfig":"18"},{"size":313,"mtime":1691425299989,"results":"25","hashOfConfig":"18"},{"size":1926,"mtime":1692279392579,"results":"26","hashOfConfig":"18"},{"size":525,"mtime":1691505925136,"results":"27","hashOfConfig":"18"},{"size":656,"mtime":1692274021942,"results":"28","hashOfConfig":"18"},{"size":2537,"mtime":1692274055900,"results":"29","hashOfConfig":"18"},{"size":3447,"mtime":1692289542446,"results":"30","hashOfConfig":"18"},{"size":1557,"mtime":1692369892914,"results":"31","hashOfConfig":"18"},{"size":7175,"mtime":1692634537403,"results":"32","hashOfConfig":"18"},{"size":1323,"mtime":1692631472611,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"cxees1",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"37"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"37"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\index.tsx",[],[],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\App.tsx",["86"],[],"import React, { useEffect } from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Login from './login/Login';\nimport Register from './register/Register';\nimport Feed from './feed/Feed';\nimport Navbar from './navbar/Navbar';\nimport { useUserContext } from './hooks/useUserContext';\nimport StatusComments from './status_comments/StatusComments';\nimport { LOGIN } from './contexts/UserContext';\nimport Profile from './profile/Profile';\n\nfunction App() {\n  const { state } = useUserContext();\n  const user = state.user;\n  \n  const { dispatch } = useUserContext();\n\n  useEffect(() => {\n    const getUser = async (username: string) => {\n      const body = {username: username};\n      \n      const response = await fetch('http://localhost:4000/users/getWithUsername', {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const json = await response.json();\n\n      if (response.ok){\n        dispatch({type: LOGIN, payload: json});\n      }\n    }\n    \n    let userStr = localStorage.getItem('user');\n    if (userStr){\n      let user = JSON.parse(userStr);\n      getUser(user.username);\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        {user && <Navbar/>}\n        <div className=\"pages\">\n          <Routes>\n            <Route\n              path='/'\n              element={<Login/>}\n            />\n            <Route \n              path='/register'\n              element={<Register/>}\n              />\n            <Route\n              path='/feed'\n              element={<Feed/>}\n            />\n            <Route\n              path='/comments/:id'\n              element={<StatusComments/>}\n            />\n            <Route\n              path='/profile/:username'\n              element={<Profile/>}\n            />\n          </Routes>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\login\\Login.tsx",[],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\register\\Register.tsx",[],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\feed\\Feed.tsx",["87","88","89"],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\navbar\\Navbar.tsx",[],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\contexts\\UserContext.tsx",[],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\hooks\\useUserContext.ts",[],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\status_add\\StatusAdd.tsx",[],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\hooks\\useFetch.ts",[],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\status_list\\StatusList.tsx",[],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\status_details\\StatusDetails.tsx",[],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\status_comments\\StatusComments.tsx",["90"],[],"import { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Status } from \"../models/Status\";\r\nimport styles from './StatusComments.module.css';\r\nimport StatusDetails from \"../status_details/StatusDetails\";\r\nimport { Comment } from \"../models/Comment\";\r\nimport { useUserContext } from \"../hooks/useUserContext\";\r\nimport CommentDetails from \"../status_comment_details/CommentDetails\";\r\n\r\nconst StatusComments = (): JSX.Element => {\r\n    const { state } = useUserContext();\r\n    const user = state.user;\r\n    const idParam = useParams<{id: string}>();\r\n    const [status, setStatus] = useState<Status | null>(null);\r\n    const [text, setText] = useState<String>('');\r\n    const [disabled, setDisabled] = useState<boolean>(true);\r\n    const [commented, setCommented] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            let body = {id: idParam.id}; \r\n            const response = await fetch('http://localhost:4000/statuses/getWithId', {\r\n                method: 'POST',\r\n                body: JSON.stringify(body),\r\n                headers: {\r\n                    'Content-Type': 'application/json' \r\n                }\r\n            });\r\n\r\n            const json = await response.json();\r\n\r\n            if (response.ok){\r\n                setStatus(json);\r\n            }\r\n            else {\r\n                console.log('Error fetching data!');\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const handleTextChange = (ev: ChangeEvent<HTMLTextAreaElement>) => {\r\n        ev.preventDefault();\r\n        setText(ev.target.value);\r\n        if (ev.target.value !== '')\r\n            setDisabled(false);\r\n        else\r\n            setDisabled(true);\r\n    }\r\n\r\n    const postComment = async () => {\r\n        const comment = {username: user?.username, text: text, id: idParam.id};\r\n\r\n        const response = await fetch('http://localhost:4000/statuses/comment', {\r\n            method: 'POST',\r\n            body: JSON.stringify(comment),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        const json = await response.json();\r\n\r\n        if (response.ok && status){\r\n            status.comments = json;\r\n            console.log(json);\r\n            setCommented(!commented);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.status}>\r\n                {status && <StatusDetails status={status} showButtons={false}/>}\r\n            </div>\r\n            <div className={styles.commentsArea}>\r\n                <textarea placeholder='Write a comment.' onChange={(ev) => handleTextChange(ev)}/>\r\n                {!disabled && <button className={styles.btn} onClick={postComment}>Post</button>}\r\n                {disabled && <button className={styles.disabledBtn} disabled={disabled}>Post</button>}\r\n                <div className={styles.divider}></div>\r\n                {/*Comments*/}\r\n                <div className={styles.commentsList}>\r\n                    {status && status.comments.map((comment: Comment) => (\r\n                        <div className={styles.commentContainer}>\r\n                            <CommentDetails comment={comment}/>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default StatusComments;","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\status_comment_details\\CommentDetails.tsx",["91","92"],[],"import { useEffect, useState } from \"react\";\r\nimport { Comment } from \"../models/Comment\";\r\nimport styles from './CommentDetails.module.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface CommentDetailsProps {\r\n    comment: Comment;\r\n}\r\n\r\nconst CommentDetails = (props: CommentDetailsProps): JSX.Element => {\r\n    const { comment } = props;\r\n    const [userPhoto, setUserPhoto] = useState<string>('');\r\n    \r\n    useEffect(() => {\r\n        const getPhoto = async () => {\r\n            const body = {username : comment.username};\r\n\r\n            const response = await fetch('http://localhost:4000/users/getPhoto', {\r\n                method: 'POST',\r\n                body: JSON.stringify(body),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n\r\n            const json = await response.json();\r\n\r\n            if (response.ok){\r\n                setUserPhoto(json);\r\n            }\r\n        }\r\n\r\n        getPhoto();\r\n    }, [])\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.firstRow}>\r\n                {userPhoto !== '' && <img src={`http://localhost:4000/uploads/${userPhoto}`} className={styles.img}></img>}\r\n                <Link to={`/profile/${comment.username}`}><b style={{paddingTop: '5px', paddingLeft: '5px'}}>@{comment.username}</b></Link>\r\n            </div>\r\n            <div className={styles.text}>\r\n                <p>{comment.text}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentDetails;","C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\profile\\Profile.tsx",["93","94","95"],[],"C:\\Users\\petro\\Desktop\\Project\\frontend\\app\\src\\profile\\Dialog.tsx",[],[],{"ruleId":"96","severity":1,"message":"97","line":42,"column":6,"nodeType":"98","endLine":42,"endColumn":8,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":15,"column":12,"nodeType":"102","messageId":"103","endLine":15,"endColumn":20},{"ruleId":"104","severity":1,"message":"105","line":88,"column":40,"nodeType":"106","endLine":88,"endColumn":119},{"ruleId":"104","severity":1,"message":"105","line":89,"column":64,"nodeType":"106","endLine":89,"endColumn":137},{"ruleId":"96","severity":1,"message":"107","line":41,"column":8,"nodeType":"98","endLine":41,"endColumn":10,"suggestions":"108"},{"ruleId":"96","severity":1,"message":"109","line":34,"column":8,"nodeType":"98","endLine":34,"endColumn":10,"suggestions":"110"},{"ruleId":"104","severity":1,"message":"105","line":39,"column":38,"nodeType":"106","endLine":39,"endColumn":117},{"ruleId":"96","severity":1,"message":"111","line":121,"column":8,"nodeType":"98","endLine":121,"endColumn":10,"suggestions":"112"},{"ruleId":"104","severity":1,"message":"105","line":128,"column":21,"nodeType":"106","endLine":128,"endColumn":102},{"ruleId":"104","severity":1,"message":"105","line":170,"column":21,"nodeType":"106","endLine":170,"endColumn":106},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["113"],"@typescript-eslint/no-unused-vars","'filename' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'idParam.id'. Either include it or remove the dependency array.",["114"],"React Hook useEffect has a missing dependency: 'comment.username'. Either include it or remove the dependency array.",["115"],"React Hook useEffect has missing dependencies: 'user?.username' and 'usernameParam.username'. Either include them or remove the dependency array.",["116"],{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [dispatch]",{"range":"125","text":"126"},"Update the dependencies array to be: [idParam.id]",{"range":"127","text":"128"},"Update the dependencies array to be: [comment.username]",{"range":"129","text":"130"},"Update the dependencies array to be: [user?.username, usernameParam.username]",{"range":"131","text":"132"},[1219,1221],"[dispatch]",[1508,1510],"[idParam.id]",[999,1001],"[comment.username]",[3920,3922],"[user?.username, usernameParam.username]"]